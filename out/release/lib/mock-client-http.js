// Generated by CoffeeScript 1.10.0
var EventEmitter, MockClientHttp;

EventEmitter = require('events').EventEmitter;

MockClientHttp = (function() {
  function MockClientHttp(options1) {
    var _this, flag, fn, i, item, j, len, len1, ref;
    this.options = options1 != null ? options1 : {};
    this.chunks = [];
    this.headers = {};
    this.req = new EventEmitter();
    this.req.session = this.options.session || {};
    this.req.url = this.options.url;
    this.req.headers = this.options.headers || {};
    this.req.method = this.options.method || 'get';
    _this = this;
    if (this.options.chunks != null) {
      this.req.chunks = this.options.chunks;
      flag = 0;
      len = this.req.chunks.length;
      if (this.options.error) {
        process.nextTick((function(_this) {
          return function() {
            return _this.req.emit('error', _this.options.error);
          };
        })(this));
      } else {
        ref = this.req.chunks;
        fn = function(item) {
          process.nextTick(function() {
            var buffer;
            buffer = new Buffer(item);
            return _this.req.emit('data', buffer);
          });
          if (flag === len) {
            return process.nextTick(function() {
              return _this.req.emit('end');
            });
          }
        };
        for (i = j = 0, len1 = ref.length; j < len1; i = ++j) {
          item = ref[i];
          flag++;
          fn(item);
        }
      }
    } else {
      process.nextTick((function(_this) {
        return function() {
          return _this.req.emit('end');
        };
      })(this));
    }
    this.req.end = (function(_this) {
      return function() {
        return _this.clean();
      };
    })(this);
    this.resp = new EventEmitter();
    this.resp.statusCode = this.options.statusCode;
    this.resp.write = (function(_this) {
      return function(data) {
        return _this.chunks.push(data);
      };
    })(this);
    this.resp.end = (function(_this) {
      return function(data) {
        if (_this.chunks.length > 0) {
          return process.nextTick(function() {
            return _this.resp.emit('end', _this.chunks);
          });
        } else {
          _this.chunks.push(data);
          return process.nextTick(function() {
            return _this.resp.emit('end', _this.chunks);
          });
        }
      };
    })(this);
    this.resp.setHeader = (function(_this) {
      return function(name, value) {
        return _this.headers[name.toLowerCase()] = value;
      };
    })(this);
    this.resp.headers = this.headers;
  }

  MockClientHttp.prototype.clean = function() {
    this.chunks = [];
    return this.headers = {};
  };

  return MockClientHttp;

})();

module.exports = function(options) {
  return new MockClientHttp(options);
};
